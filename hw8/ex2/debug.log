====== Machine state ======

***** Command *****
[malloc;
bind #K_base;
malloc;
push #K_base;
store;
malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[]

***** Memory *****


====== Machine state ======

***** Command *****
[bind #K_base;
malloc;
push #K_base;
store;
malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<1, 0>]

***** Environment *****
[]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
push #K_base;
store;
malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#K_base : <1, 0>]

***** Memory *****


====== Machine state ======

***** Command *****
[push #K_base;
store;
malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<2, 0>]

***** Environment *****
[#K_base : <1, 0>]

***** Memory *****


====== Machine state ======

***** Command *****
[store;
malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<1, 0>;
<2, 0>]

***** Environment *****
[#K_base : <1, 0>]

***** Memory *****


====== Machine state ======

***** Command *****
[malloc;
bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#K_base : <1, 0>]

***** Memory *****
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind #call_depth;
push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<3, 0>]

***** Environment *****
[#K_base : <1, 0>]

***** Memory *****
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 0;
push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[0]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<3, 0>;
0]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 0;
push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[0]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<1, 0>;
0]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<2, 0>;
0]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push (x,
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind f;
malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind #write_var;
push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<4, 0>]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 2;
malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push (_,
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<1, 0>;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<2, 0>;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<3, 0>;
<2, 0>;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[0;
<2, 0>;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<2, 0>;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : 0
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[<3, 0>;
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
add;
push #call_depth;
store;
call]

***** Stack *****
[0;
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
push #call_depth;
store;
call]

***** Stack *****
[1;
0;
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
call]

***** Stack *****
[1;
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
call]

***** Stack *****
[<3, 0>;
1;
<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<3, 0> : 0
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<5, 0>;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind f;
push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]]

***** Environment *****
[x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<5, 0>]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[false]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<5, 0>]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<5, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<1, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<2, 1>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
1;
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2;
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
2;
<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<3, 0> : 1
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind f;
push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
2]

***** Environment *****
[x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[false;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push f;
push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<6, 0>;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[sub;
malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
1;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push (_,
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  );
push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<1, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2;
<2, 0>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<2, 2>;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2;
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2;
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3;
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
3;
<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<3, 0> : 2
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<7, 0>;
0;
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[bind f;
push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push x;
load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<7, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
0;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push 0;
  unbind;
  pop],
  [push x;
  load;
  push f;
  push f;
  push x;
  load;
  push 1;
  sub;
  malloc;
  push (_,
    [add;
    unbind;
    pop;
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    );
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  store;
  push #call_depth;
  load;
  push 1;
  add;
  push #call_depth;
  store;
  call]);
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[true;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 0;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(f, (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>]);
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
3;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[false;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[3;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
3;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[2;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
2;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<7, 0> : 0
<3, 0> : 3
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<1, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<2, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
<2, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
load;
push unit;
malloc;
call]

***** Stack *****
[2;
<2, 0>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push unit;
malloc;
call]

***** Stack *****
[<2, 2>;
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push unit;
malloc;
call]

***** Stack *****
[(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
call]

***** Stack *****
[unit;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<8, 0>;
unit;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
0;
1;
2]

***** Environment *****
[x : <7, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
1;
2]

***** Environment *****
[_ : <8, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[_ : <8, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(_, <8, 0>);
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[2;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[false;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[2;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
2;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
1;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<8, 0> : unit
<3, 0> : 2
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<1, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<2, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
<2, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
<2, 0>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push unit;
malloc;
call]

***** Stack *****
[<2, 1>;
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push unit;
malloc;
call]

***** Stack *****
[(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
call]

***** Stack *****
[unit;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<9, 0>;
unit;
(fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
1;
2]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <6, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
2]

***** Environment *****
[_ : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[_ : <9, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(_, <9, 0>);
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
1;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[false;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[sub;
push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[1;
1;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[0;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
0;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<9, 0> : unit
<3, 0> : 1
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #K_base;
load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<1, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<2, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
add;
load;
push unit;
malloc;
call]

***** Stack *****
[<3, 0>;
<2, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[add;
load;
push unit;
malloc;
call]

***** Stack *****
[0;
<2, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push unit;
malloc;
call]

***** Stack *****
[<2, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push unit;
malloc;
call]

***** Stack *****
[(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
call]

***** Stack *****
[unit;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<10, 0>;
unit;
(fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
x : <5, 0>;
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #write_var;
store;
push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[store;
push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<4, 0>;
3]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #write_var;
load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<4, 0>]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[put;
push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

3
====== Machine state ======

***** Command *****
[push #write_var;
load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<4, 0>]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[unbind;
pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[_ : <10, 0>;
#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[pop;
unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(_, <10, 0>);
3]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[unbind;
pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[#write_var : <4, 0>;
f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[pop;
push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[(#write_var, <4, 0>);
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push #call_depth;
load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[load;
push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[<3, 0>;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push 1;
less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[0;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[less;
jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[1;
0;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[jtr (
  [push (_,
    []
    );
  push unit;
  malloc;
  call],
  [push #call_depth;
  load;
  push 1;
  sub;
  push #call_depth;
  store;
  push #K_base;
  load;
  push #call_depth;
  load;
  add;
  load;
  push unit;
  malloc;
  call])]

***** Stack *****
[true;
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push (_,
  []
  );
push unit;
malloc;
call]

***** Stack *****
[3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[push unit;
malloc;
call]

***** Stack *****
[(fun _ ->
  []
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[malloc;
call]

***** Stack *****
[unit;
(fun _ ->
  []
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

====== Machine state ======

***** Command *****
[call]

***** Stack *****
[<11, 0>;
unit;
(fun _ ->
  []
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>];
3]

***** Environment *****
[f : (fun x ->
  [bind f;
  push x;
  load;
  push 1;
  less;
  jtr (
    [push 0;
    unbind;
    pop],
    [push x;
    load;
    push f;
    push f;
    push x;
    load;
    push 1;
    sub;
    malloc;
    push (_,
      [add;
      unbind;
      pop;
      push #call_depth;
      load;
      push 1;
      less;
      jtr (
        [push (_,
          []
          );
        push unit;
        malloc;
        call],
        [push #call_depth;
        load;
        push 1;
        sub;
        push #call_depth;
        store;
        push #K_base;
        load;
        push #call_depth;
        load;
        add;
        load;
        push unit;
        malloc;
        call])]
      );
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    store;
    push #call_depth;
    load;
    push 1;
    add;
    push #call_depth;
    store;
    call]);
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#call_depth : <3, 0>;
  #K_base : <1, 0>];
#call_depth : <3, 0>;
#K_base : <1, 0>]

***** Memory *****
<4, 0> : 3
<10, 0> : unit
<3, 0> : 0
<9, 0> : unit
<8, 0> : unit
<7, 0> : 0
<2, 2> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <6, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<6, 0> : 1
<2, 1> : (fun _ ->
  [add;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  x : <5, 0>;
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<5, 0> : 2
<2, 0> : (fun _ ->
  [push #write_var;
  store;
  push #write_var;
  load;
  put;
  push #write_var;
  load;
  unbind;
  pop;
  unbind;
  pop;
  push #call_depth;
  load;
  push 1;
  less;
  jtr (
    [push (_,
      []
      );
    push unit;
    malloc;
    call],
    [push #call_depth;
    load;
    push 1;
    sub;
    push #call_depth;
    store;
    push #K_base;
    load;
    push #call_depth;
    load;
    add;
    load;
    push unit;
    malloc;
    call])]
  ), Env =
  [#write_var : <4, 0>;
  f : (fun x ->
    [bind f;
    push x;
    load;
    push 1;
    less;
    jtr (
      [push 0;
      unbind;
      pop],
      [push x;
      load;
      push f;
      push f;
      push x;
      load;
      push 1;
      sub;
      malloc;
      push (_,
        [add;
        unbind;
        pop;
        push #call_depth;
        load;
        push 1;
        less;
        jtr (
          [push (_,
            []
            );
          push unit;
          malloc;
          call],
          [push #call_depth;
          load;
          push 1;
          sub;
          push #call_depth;
          store;
          push #K_base;
          load;
          push #call_depth;
          load;
          add;
          load;
          push unit;
          malloc;
          call])]
        );
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      store;
      push #call_depth;
      load;
      push 1;
      add;
      push #call_depth;
      store;
      call]);
    push #call_depth;
    load;
    push 1;
    less;
    jtr (
      [push (_,
        []
        );
      push unit;
      malloc;
      call],
      [push #call_depth;
      load;
      push 1;
      sub;
      push #call_depth;
      store;
      push #K_base;
      load;
      push #call_depth;
      load;
      add;
      load;
      push unit;
      malloc;
      call])]
    ), Env =
    [#call_depth : <3, 0>;
    #K_base : <1, 0>];
  #call_depth : <3, 0>;
  #K_base : <1, 0>]
<1, 0> : <2, 0>

